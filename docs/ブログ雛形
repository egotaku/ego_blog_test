### はじめに
開発室のはちわれです。ナイルに転職して約３ヶ月、Scalaの経験も転職してから本格的にコードを書く様になったのでまだ３ヶ月です。
普段はScala、Akkaを使って開発を行っています。
今回は、Scala試用期間中の私でも出来たakka-clusterとakka-persitentを使った「Event sourcing＋CQRS」を実現する方法について
書かせて頂きたいと思います。

### Akkaとは
既に他のエンジニア方々のブログでも触れられているかもしれませんが、Akkaについて軽く説明したいと思います。
AkkaはLightbend社(旧typesafe)が提供する、アクターモデルをベースと分散処理フレームワークです。
PlayやSplayといった他のフレームワークの中でも利用されています。
Akkaにはこの記事で紹介するakka-clusterやakka-persistenceの他にも多くのライブラリがあり
下記の様にsbtで個別に使いたい物を設定できるので、個人的な使用感としてはフレームワークというよりライブラリ群といった感じです。

```
libraryDependencies ++= Seq(
  "com.typesafe.akka" %% "akka-actor" % "2.4.8"
)
```

### 今回やること
最初に書かせて頂きましたが、今回はakka-clusterとakka-persistentを組み合わせて
「Event sourcing＋CQRS」を実現する方法を紹介させて頂きます。
本題に移る前に、Event sourcingとCQRSについて軽く触れさせて頂きます。

### イベントソーシング
ステート(状態)ではなく、イベントを中心に考えられたアークテクチャ
ステートではなく、全てのイベントを保存、再生することによってステートを表します。

### CQRS(コマンドクエリ責任分離)
Command Query Responsibility Segregationの略です。
簡単に説明するとCommand(更新)とQuery(参照)を明確に分離しようという考え方です。
弊社でも取り入れているDDD(ドメイン駆動設計)と一緒に語られることが多いです。
それはQuery側はドメインの影響を受けることが少なく、逆にCommand側はドメインの影響を受けることが多い為
ドメインの分離により、CommandとQueryの分離が行われることが多い為です。
どの程度CommandとQueryの分離を行うかは、人によって認識や意見が別れることもあるかと思います。
今回の記事を執筆する上で調査した限りでも、アプリケーションのレイヤーでドメイン層からQueryを出すべきという方もいれば
ドメイン層の中で分離を行うという意見もあり、この辺は各々携わっているシステムのドメインによる所かと思います。

### この実装によって得られるもの
今回の実装によって、Event sourcingとCQRSを実現することができます。
しかし、得られる効果はこれだけではありません。
akka-clusterとakka-persitentを組み合わせることにより、以下の効果も同時に得ることができます。

　- 耐障害性(Resilient)
　　ここで言う耐障害性とは、障害が起きないという意味での耐障害性ではありません。
　　障害が発生した際の高い回復性を指し、リアクティグシステムで言われるResilientにあたります。
　　この高い回復性は以下のメカニズムによって実現されています。

　　・akka-clusterのfailure detector
　　・akka-persitentのrecover

　- 即応性(Responsive)
　　akka-clusterでノードを分散させることにより実現します。
　　仮にひとつのActorで動いている場合、単一のActorは自らに送られてきたメッセージをメールボックスに格納し順に処理していきます。
　　Actorも当然非同期で動きますが、単一の場合はメールボックスに先に格納された他のメッセージがある場合、処理されるまでにタイムラグが発生します。(ごくわずかだと思いますが)
　　akka-clusterでノードを分散させることにより、この問題を軽減することができます。
　　下図の通り、ノードを分散させれば同じメッセージ量だったとしても処理されるまでの時間が短くなり、より高速なレスポンスを実現することができます。

　- ドメインの分離による高い独立性と保守性
　　CQRSの概念に基づいてCommandとQueryの分離(ドメインの分離)をすることにより、それぞれを独立したコンポーネントして扱うことができます。
　　これにより、CommandとQueryが疎結合となりどちらかに修正を行った際に、もう片方にも修正を行わなければならないという事態を避けることができ
　　修正の影響を気にすることなく、作業を行うことができます。
　　ドメインの変更があった場合も、Command側だけに影響する内容であればCommand側だけを修正すれば良く工数の短縮と高い保守性を得ることができます。

###実装例
それでは、少し前置きが長くなってしまいましたが、これからコードを交えながら
今回の実装例について説明をさせていただきます。
まずは構成のイメージを下記に記してあります。

#### 構成イメージ
TODO 構成イメージの画像貼る

#### Read側ノードの実装
Read側のノードでは情報の参照と、Write側から送られてくるイベントをレシーブし
自らのデータを更新する処理を実装します。




### akka-cluster
akka-clusterはgossip protocolとfailure detectorをベースとした
分散ノード型システムを構築する為のAkka拡張です。
今回の実装例では、akka-clusterのノードをRead側とWrite側のノードに分けることによってCQRSを実現しています。

### akka-persistent
akka-persistentはイベントソーシングを実現するAkka拡張です。Actorで行われたイベントを永続化することによって
例えばJVMなどがクラッシュした場合でも、保存したイベントを順次適用することによって障害が発生する前の状態に戻すことができます。
